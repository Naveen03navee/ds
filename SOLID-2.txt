<<<<----1STRING OPERATION---->>>>
#include <stdio.h>
#include <string.h>

int main() {
    char a[20] = "MSRCASC", b[20] = "college", c[20];
    printf("1. Copy: %s\n", strcpy(c, a));
    printf("2. Concat: %s\n", strcat(a, b));
    printf("3. Length: %lu\n", strlen(a));
    printf("4. Compare: %d\n", strcmp("hi", "hi"));
    printf("5. NCopy: %s\n", strncpy(c, b, 3));
    return 0;
}


<<<<----2A. GCD OF THREE NUMBERS---->>>>
#include <stdio.h>

int gcd(int a, int b) {
    return b == 0 ? a : gcd(b, a % b);
}

int main() {
    int a, b, c;
    printf("Enter three numbers: ");
    scanf("%d %d %d", &a, &b, &c);
    printf("GCD = %d\n", gcd(a, gcd(b, c)));
    return 0;
}

<<<<---2B. Binary Search--->>>>

#include <stdio.h>
int main()
{
    int a[20], n, key, low, high, mid;
    printf("Enter array size: ");
    scanf("%d", &n);
    printf("Enter sorted elements: ");
    for(int i = 0; i < n; i++)
        scanf("%d", &a[i]);
        printf("Enter search element: ");
    scanf("%d", &key);
    low = 0;
    high = n - 1;
    while(low <= high) {
        mid = low + (high - low) / 2;
            if(a[mid] == key) {
            printf("Found at position %d\n", mid);
            return 0;
        }
        if(a[mid] < key)
            low = mid + 1;
        else
            high = mid - 1;
    }
    printf("Element not found\n");
    return 0;
}




<<<<----3.ARRAY OPERATION---->>>>
#include <stdio.h>

int main() {
    int a[50], n = 5, ch, pos, val;
    for (int i = 0; i < n; i++) a[i] = i + 1;
    
    do {
        printf("\n1.Insert 2.Delete 3.Display 4.Exit\nChoice: ");
        scanf("%d", &ch);
        switch (ch) {
            case 1:
                printf("Pos & Val: ");
                scanf("%d%d", &pos, &val);
                for (int i = n; i >= pos; i--) a[i] = a[i-1];
                a[pos-1] = val; n++;
                break;
            case 2:
                printf("Pos: ");
                scanf("%d", &pos);
                for (int i = pos-1; i < n-1; i++) a[i] = a[i+1];
                n--;
                break;
            case 3:
                for (int i = 0; i < n; i++) printf("%d ", a[i]);
                printf("\n");
                break;
        }
    } while (ch != 4);
    return 0;
}


<<<<----4.WORKING OF STACK---->>>>
#include <stdio.h>
#define SIZE 5

int main() {
    int s[SIZE], top = -1, ch, val;
    
    do {
        printf("\n1.Push 2.Pop 3.Display 4.Exit\nChoice: ");
        scanf("%d", &ch);
        switch (ch) {
            case 1:
                if (top == SIZE-1) printf("Overflow\n");
                else {
                    printf("Val: "); scanf("%d", &val);
                    s[++top] = val;
                }
                break;
            case 2:
                if (top == -1) printf("Underflow\n");
                else printf("Popped: %d\n", s[top--]);
                break;
            case 3:
                for (int i = top; i >= 0; i--) printf("%d ", s[i]);
                printf("\n");
        }
    } while (ch != 4);
    return 0;
}


<<<<----5.WORKING OF QUEUE---->>>>
#include <stdio.h>
#define SIZE 5

int main() {
    int q[SIZE], front = 0, rear = -1, ch, val;
    
    do {
        printf("\n1.Enqueue 2.Dequeue 3.Display 4.Exit\nChoice: ");
        scanf("%d", &ch);
        switch (ch) {
            case 1:
                if (rear == SIZE-1) printf("Overflow\n");
                else {
                    printf("Val: "); scanf("%d", &val);
                    q[++rear] = val;
                }
                break;
            case 2:
                if (front > rear) printf("Underflow\n");
                else printf("Dequeued: %d\n", q[front++]);
                break;
            case 3:
                for (int i = front; i <= rear; i++) printf("%d ", q[i]);
                printf("\n");
        }
    } while (ch != 4);
    return 0;
}


<<<<----6.SINGLY LINKED LIST---->>>>
#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
} *head = NULL;

void insert(int val) {
    struct Node* temp = malloc(sizeof(struct Node));
    temp->data = val; temp->next = NULL;
    if (!head) head = temp;
    else {
        struct Node* t = head;
        while (t->next) t = t->next;
        t->next = temp;
    }
}

void delete() {
    if (!head) printf("Empty\n");
    else {
        struct Node* t = head;
        head = head->next;
        free(t);
    }
}

void display() {
    for (struct Node* t = head; t; t = t->next)
        printf("%d ", t->data);
    printf("\n");
}

int main() {
    int ch, val;
    do {
        printf("\n1.Insert 2.Delete 3.Display 4.Exit\nChoice: ");
        scanf("%d", &ch);
        switch (ch) {
            case 1: printf("Val: "); scanf("%d", &val); insert(val); break;
            case 2: delete(); break;
            case 3: display();
        }
    } while (ch != 4);
    return 0;
}


<<<<----7.DOUBLY LINKED LIST---->>>>
#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node *prev, *next;
} *head = NULL;

void insert(int val) {
    struct Node* temp = malloc(sizeof(struct Node));
    temp->data = val; temp->prev = temp->next = NULL;
    if (!head) head = temp;
    else {
        struct Node* t = head;
        while (t->next) t = t->next;
        t->next = temp; temp->prev = t;
    }
}

void delete() {
    if (!head) return;
    struct Node* t = head;
    head = head->next;
    if (head) head->prev = NULL;
    free(t);
}

void display() {
    for (struct Node* t = head; t; t = t->next)
        printf("%d ", t->data);
    printf("\n");
}

int main() {
    int ch, val;
    do {
        printf("\n1.Insert 2.Delete 3.Display 4.Exit\nChoice: ");
        scanf("%d", &ch);
        if (ch == 1) { printf("Val: "); scanf("%d", &val); insert(val); }
        else if (ch == 2) delete();
        else if (ch == 3) display();
    } while (ch != 4);
    return 0;
}


<<<<----8.CIRCULAR LINKED LIST---->>>>
#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
} *head = NULL;

void insert(int val) {
    struct Node* temp = malloc(sizeof(struct Node));
    temp->data = val;
    if (!head) { head = temp; temp->next = head; }
    else {
        struct Node* t = head;
        while (t->next != head) t = t->next;
        t->next = temp; temp->next = head;
    }
}

void delete() {
    if (!head) return;
    if (head->next == head) { free(head); head = NULL; return; }
    struct Node* t = head;
    while (t->next != head) t = t->next;
    struct Node* del = head;
    head = head->next;
    t->next = head;
    free(del);
}

void display() {
    if (!head) return;
    struct Node* t = head;
    do {
        printf("%d ", t->data);
        t = t->next;
    } while (t != head);
    printf("\n");
}

int main() {
    int ch, val;
    do {
        printf("\n1.Insert 2.Delete 3.Display 4.Exit\nChoice: ");
        scanf("%d", &ch);
        if (ch == 1) { printf("Val: "); scanf("%d", &val); insert(val); }
        else if (ch == 2) delete();
        else if (ch == 3) display();
    } while (ch != 4);
    return 0;
}


<<<<----9.Quick SORT---->>>>

#include <stdio.h>
void quick(int a[], int low, int high) {
    if (low >= high) return;
    int i = low, j = high, pivot = a[low];
    while (i < j) {
        while (a[j] > pivot) j--;
        while (i < j && a[i] <= pivot) i++;
        if (i < j) {
            int t = a[i]; a[i] = a[j]; a[j] = t;
        }
    }
    a[low] = a[j]; a[j] = pivot;
    quick(a, low, j - 1);
    quick(a, j + 1, high);
}
int main() {
    int a[] = {34, 7, 23, 32, 5, 62}, n = 6;
    quick(a, 0, n - 1);
    for (int i = 0; i < n; i++) printf(" %d",a[i]);
}



<<<<----10.MERGE SORT---->>>>
#include <stdio.h>

void merge(int a[], int l, int m, int r) {
    int i = l, j = m+1, k = 0, b[50];
    while (i <= m && j <= r)
        b[k++] = (a[i] < a[j]) ? a[i++] : a[j++];
    while (i <= m) b[k++] = a[i++];
    while (j <= r) b[k++] = a[j++];
    for (i = l, k = 0; i <= r; i++) a[i] = b[k++];
}

void mergeSort(int a[], int l, int r) {
    if (l < r) {
        int m = (l + r)/2;
        mergeSort(a, l, m);
        mergeSort(a, m+1, r);
        merge(a, l, m, r);
    }
}

int main() {
    int a[50], n;
    printf("Enter n: ");
    scanf("%d", &n);
    printf("Enter %d elements:\n", n);
    for (int i = 0; i < n; i++) scanf("%d", &a[i]);
    
    mergeSort(a, 0, n-1);
    
    printf("Sorted: ");
    for (int i = 0; i < n; i++) printf("%d ", a[i]);
    return 0;
}

<<<<---12. Binary Tree and 3 Traversal Techniques ---->>>>

#include <stdio.h>
#include <stdlib.h>
typedef struct N{int d;struct N*l,*r;}N;
N*C(N*r,int v){if(!r){r=malloc(sizeof(N));r->d=v;r->l=r->r=0;}
else if(v<r->d)r->l=C(r->l,v);else r->r=C(r->r,v);return r;}
void I(N*r){if(r){I(r->l);printf("%d ",r->d);I(r->r);}}
void P(N*r){if(r){printf("%d ",r->d);P(r->l);P(r->r);}}
void O(N*r){if(r){O(r->l);O(r->r);printf("%d ",r->d);}}
int main(){
  int a[]={50,30,20,40,70,60,80},i;
  N*r=0;
  for(i=0;i<7;i++)r=C(r,a[i]);
  printf("Inorder traversal: ");I(r);puts("");
  printf("Preorder traversal: ");P(r);puts("");
  printf("Postorder traversal: ");O(r);puts("");
} 
